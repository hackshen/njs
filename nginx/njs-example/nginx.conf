# Nginx配置文件示例 - 使用NJS模块

# 加载NJS模块
load_module modules/ngx_http_js_module.so;

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    # 导入NJS脚本文件
    js_import http.js;
    js_import variables.js;
    js_import auth.js;
    js_import subrequest.js;
    
    # 设置NJS模块相关变量
    js_set $jwt_token variables.generateJWT;
    js_set $session_id variables.handleCookieSession;
    js_set $ip_allowed variables.checkIPAccess;

    server {
        listen 80;
        server_name localhost;
        
        # 设置自定义变量
        set $user_type "";
        set $access_level "";
        set $authenticated_user "";
        set $jwt_user "";
        set $jwt_role "";
        set $api_user_id "";
        set $api_user_role "";
        
        # 根路径 - 显示欢迎信息
        location = / {
            js_content http.hello;
        }
        
        # 显示请求信息
        location /request-info {
            js_content http.requestInfo;
        }
        
        # 根据用户代理返回不同内容
        location /ua {
            js_content http.userAgentContent;
        }
        
        # 重定向处理
        location /redirect {
            js_content http.redirect;
        }
        
        # API示例
        location /api {
            js_content http.apiResponse;
        }
        
        # 设置变量示例
        location /set-vars {
            # 预处理阶段设置变量
            js_set $custom_vars variables.setCustomVariables;
            
            # 返回变量值
            return 200 "User Type: $user_type\nAccess Level: $access_level\nCustom: $custom_vars\n";
        }
        
        # 会话处理示例
        location /session {
            # 设置会话ID变量
            set $session_value $session_id;
            
            # 返回会话信息
            return 200 "会话ID: $session_value\n";
        }
        
        # 基本认证示例
        location /basic-auth {
            # 认证阶段
            js_content auth.basicAuth;
            
            # 这一行仅在认证通过后执行
            # 由于js_content定义了内容处理器，这里的return不会被执行
            # return 200 "认证成功! 用户: $authenticated_user\n";
        }
        
        # API密钥认证示例
        location /api-auth {
            js_content auth.apiKeyAuth;
            
            # 这一行仅在认证通过后执行
            # return 200 "API认证成功! 用户ID: $api_user_id, 角色: $api_user_role\n";
        }
        
        # JWT认证示例
        location /jwt-auth {
            js_content auth.jwtAuth;
            
            # 这一行仅在认证通过后执行
            # return 200 "JWT认证成功! 用户: $jwt_user, 角色: $jwt_role\n";
        }
        
        # IP访问控制示例
        location /ip-check {
            if ($ip_allowed = "0") {
                return 403 "IP不在白名单中\n";
            }
            
            return 200 "IP访问已授权\n";
        }
        
        # 获取JWT令牌示例
        location /get-token {
            return 200 "JWT令牌: $jwt_token\n";
        }
        
        # 子请求处理示例
        location /subrequest {
            js_content subrequest.handleSubRequest;
        }
        
        # 聚合多个子请求的结果示例
        location /aggregate {
            js_content subrequest.aggregateResults;
        }
        
        # 条件处理示例（需要先认证）
        location /conditional {
            js_content subrequest.conditionalProcessing;
        }
    }
} 