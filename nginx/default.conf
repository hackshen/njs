# Nginx整合配置 - Docker版本
# 适用于Docker环境，移除了需要在主机上配置的模块加载

# HTTP配置
server {
    listen 80;
    server_name localhost;

    # 日志配置
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # 导入NJS脚本文件 - 路径相对于Docker容器内
    js_import /etc/nginx/njs-scripts/http.js;
    js_import /etc/nginx/njs-scripts/variables.js;
    js_import /etc/nginx/njs-scripts/auth.js;
    js_import /etc/nginx/njs-scripts/subrequest.js;
    
    # 设置NJS模块相关变量
    js_set $jwt_token variables.generateJWT;
    js_set $session_id variables.handleCookieSession;
    js_set $ip_allowed variables.checkIPAccess;
    
    # 设置自定义变量
    set $user_type "";
    set $access_level "";
    set $authenticated_user "";
    set $jwt_user "";
    set $jwt_role "";
    set $api_user_id "";
    set $api_user_role "";
    
    # 静态资源目录
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
    
    # 代理Node.js应用
    location /api/ {
        # 如果要使用NJS处理API请求，取消注释下面的行
        # js_content http.apiResponse;
        
        # 代理到Node.js应用
        proxy_pass http://app:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_cache_bypass $http_upgrade;
    }
    
    # 静态文件缓存
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        root /usr/share/nginx/html;
        expires 30d;
    }
    
    # NJS示例部分 - 使用/njs路径前缀隔离

    # 根路径 - 显示欢迎信息
    location = /njs {
        js_content http.hello;
    }
    
    # 显示请求信息
    location /njs/request-info {
        js_content http.requestInfo;
    }
    
    # 根据用户代理返回不同内容
    location /njs/ua {
        js_content http.userAgentContent;
    }
    
    # 重定向处理
    location /njs/redirect {
        js_content http.redirect;
    }
    
    # API示例
    location /njs/api {
        js_content http.apiResponse;
    }
    
    # 设置变量示例
    location /njs/set-vars {
        # 预处理阶段设置变量
        js_set $custom_vars variables.setCustomVariables;
        
        # 使用js_content代替return
        js_content http.showVars;
    }
    
    # 会话处理示例
    location /njs/session {
        # 使用js_content处理会话
        js_content http.showSession;
    }
    
    # 基本认证示例
    location /njs/basic-auth {
        # 认证阶段
        js_content auth.basicAuth;
    }
    
    # API密钥认证示例
    location /njs/api-auth {
        js_content auth.apiKeyAuth;
    }
    
    # JWT认证示例
    location /njs/jwt-auth {
        js_content auth.jwtAuth;
    }
    
    # IP访问控制示例
    location /njs/ip-check {
        # 使用js_content处理IP检查
        js_content http.checkIp;
    }
    
    # 获取JWT令牌示例
    location /njs/get-token {
        # 使用js_content显示JWT令牌
        js_content http.showJwtToken;
    }
    
    # 子请求处理示例
    location /njs/subrequest {
        js_content subrequest.handleSubRequest;
    }
    
    # 聚合多个子请求的结果示例
    location /njs/aggregate {
        js_content subrequest.aggregateResults;
    }
    
    # 条件处理示例（需要先认证）
    location /njs/conditional {
        js_content subrequest.conditionalProcessing;
    }
} 